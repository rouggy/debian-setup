#! /bin/bash

## Credits to swizzin for this file

# A little tool to help make more stylish bash output with colours and indentation

export bell="true"                 # Whether or not Warning and Error should trigger the bell
export fold="true"                 # Whether or not to apply line wrapping to terminal for indentation
export full_width="true"           # Whether output should be as wide as the terminal. Setting to false will still wrap when terminal is less than default width
export width_cap="140"             # Applies when full-width is false. If terminal has less cols then this, the max terminal width is used.
export strip_ansi_from_log="false" # Whether the log should keep ansi escape characters (colors, etc) or not to ensure human readability

# colours
export red=$(tput setaf 1 || tput AF 1)
export green=$(tput setaf 2 || tput AF 2)
export yellow=$(tput setaf 3 || tput AF 3)
export blue=$(tput setaf 4 || tput AF 4)
export magenta=$(tput setaf 5 || tput AF 5)
export cyan=$(tput setaf 6 || tput AF 6)

# reset
export nc="$(tput sgr0)"

# modifiers
export bold=$(tput bold || tput md) # Start boldrbold="\e[21m"
export dim=$(tput dim)              # Start dim
export rdim="\e[22m"
export under=$(tput smul || tput us)   # Start under
export runder=$(tput rmul || tput ue)  # End   under
export italic=$(tput sitm || tput ZH)  # Start italic
export eitalic=$(tput ritm || tput ZR) # End   italic
export stout=$(tput smso || tput so)   # Start stand-out
export estout=$(tput rmso || tput se)  # End stand-out
# resetAllModes="\e[21m\e[22m\e[24m\e[25m\e[27m\e[28m"

############ FUNCTIONS
# Unless otherwise specified, the following parameters apply:
# $1    the message to print
# $log  (optionally declared outside) the file to log to
echo_warn() {
	colorprint "${yellow}${bold}WARN" "$1"
}
export -f echo_warn

echo_error() {
	colorprint "${red}${bold}ERROR" "$1"
}
export -f echo_error

echo_info() {
	colorprint "${bold}INFO" "$1"
}
export -f echo_info

echo_docs() {
	colorprint "${cyan}${bold}DOCS" "${nc}${cyan}${italic}Further reference: ${under}https://swizzin.ltd/$1"
}
export -f echo_docs

echo_progress_start() {
	colorprint "${dim}..." "$1"
}
export -f echo_progress_start

# Prints the reply to echo_progess_start or "Done" if no params
echo_progress_done() {
	if [[ -z $1 ]]; then
		message="Done"
	else
		message="$1"
	fi
	colorprint "" "${green}${dim}\u2714   ${italic}$message"
}
export -f echo_progress_done

echo_success() {
	colorprint "${green}${bold}SUCCESS" "$1"
}
export -f echo_success

echo_query() {
	colorprint "${blue}${bold}INPUT" "${italic}$1"
	if [[ -n $2 ]]; then
		options="($2) "
	else
		options=""
	fi
	echo -en "${blue}${bold}${options}>${nc} "
}
export -f echo_query

# $1 = "Heading" (Include colours and other non-printing chars here)
# $2 = "Body" (Message, can contain non-printing chars but they will be counted into the fold)
# $log = location of the file to log into
function colorprint() {
	heading="$1\t"
	body="$2"
	printf '%b' "${heading}"
	printf '%b\n' "${body}${nc}" | do_the_wrap
}
export -f colorprint

# Wraps indents the text according to variables / terminal output
function do_the_wrap() {
        if [[ $fold = true ]]; then
                # width to use for folding and wrapping (excludes tab for indentation, subtract 8 char to account for that)
                width=$(tput cols)
                if [[ $full_width == "false" ]]; then
                        if [[ $width -gt $width_cap ]]; then
                                width=$width_cap
                        fi
                fi
                width=$((width - 8))
                fold -s -w${width} | sed -e '2,$s/^/\t/'
        else
                cat
        fi
}
export -f do_the_wrap


function strip_ansi() {
	if [[ $strip_ansi_from_log == "true" ]]; then
		sed 's/\x1B\[[0-9;]\+[A-Za-z]//g'
	else
		cat
	fi
}
export -f strip_ansi
