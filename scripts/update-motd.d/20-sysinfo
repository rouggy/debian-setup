#!/bin/bash
#
# Test whether bash supports arrays.
# (Support for arrays was only added recently.)
#
whotest[0]='test' || (echo 'Failure: arrays not supported in your version of bash. Must be at least version 4 to have associative arrays.' && exit 2)

#############################################################################
#                                SETTINGS                                   #
# Comment with a # messages you don't want displayed                        #
# Change order of items in array to change order of displayed messages      #
#############################################################################

settings=(
    LOGOSMALL
#    LOGOBIG
    SYSTEM
    DATE
    UPTIME
    MEMORY
#    DISKS
    LOADAVERAGE
    PROCESSES
    IP
    # Please be aware UPDATES command may take a few seconds to run
    # If you don't like waiting, just comment it out
    UPDATES
    WEATHER
    CPUTEMP
    GPUTEMP
    SSHLOGINS
    LASTLOGIN
#    MESSAGES
    TOP_PROCESSES
)

# Accuweather location codes: https://github.com/SixBytesUnder/custom-motd/blob/master/accuweather_location_codes.txt
weatherCode="ASI|VN|VM060|HO CHI MINH CITY"

# Show temperatures in "C" for Celsius or "F" for Fahrenheit
degrees=C

# Colour reference
#    Colour    Value
#    black       0
#    red         1
#    green       2
#    yellow      3
#    blue        4
#    magenta     5
#    cyan        6
#    white       7
declare -A colour=(
    [header]="\e[35m"
    [neutral]="\e[1;32m"
    [info]=$(tput setaf 4)
    [warning]=$(tput setaf 1)
    [reset]=$(tput sgr0)
)


#############################################################################
#                                                                           #
# DO NOT TOUCH ANYTHING BELOW THIS POINT, UNLESS YOU KNOW WHAT YOU'RE DOING #
#                                                                           #
#############################################################################

# Expects two arguments:
# $1 is the header
# $2 is the message
function displayMessage {
    if [ -z "$1" ]; then
        echo -e "${colour[neutral]}$2"
    else
        while read line; do
            echo -e "${colour[header]}$1 ${colour[neutral]}$line";
        done <<< "$2"
    fi
}

function metrics {
    case "$1" in
    'SYSTEM')
        displayMessage 'System.............:' "$(uname -snrmo)"
        ;;
    'DATE')
        displayMessage 'Date...............:' "$(date +"%A, %e %B %Y, %r")"
        ;;
    'UPTIME')
        let upSeconds="$(/usr/bin/cut -d. -f1 /proc/uptime)"
        let sec=$((${upSeconds}%60))
        let min=$((${upSeconds}/60%60))
        let hour=$((${upSeconds}/3600%24))
        let day=$((${upSeconds}/86400))
        displayMessage 'Uptime.............:' "$(printf "%d days, %02dh %02dm %02ds" "$day" "$hour" "$min" "$sec")"
        ;;
    'MEMORY')
	displayMessage 'Memory.............:' "$(awk '$3=="kB"{$2=$2/1024^2;$3="GB";} 1' /proc/meminfo | column -t | grep MemAvailable | awk '{print $2" Gb (Free)"}') / $(awk '$3=="kB"{$2=$2/1024^2;$3="GB";} 1' /proc/meminfo | column -t | grep MemTotal | awk '{print $2" Gb (Total)"}')"
        ;;
    'DISKS')
        displayMessage 'Disk...............:' "$(df -h | grep "^/dev/" | grep /home | awk '{print $6 " - "$4" (Free) / "$2" (Total)"}')"
        ;;
    'LOADAVERAGE')
        read one five fifteen rest < /proc/loadavg
        displayMessage 'Load average.......:' "${one}, ${five}, ${fifteen} (1, 5, 15 min)"
        ;;
    'PROCESSES')
        displayMessage 'Running processes..:' "$(ps ax | wc -l | tr -d " ")"
        ;;
    'IP')
        displayMessage 'IP addresses.......:' "$(hostname -I)"
        ;;
    'UPDATES')
        displayMessage 'Available updates..:' "$(apt-get -s dist-upgrade | tail -n 1 | cut -d' ' -f 10) packages can be updated"
        ;;
    'CPUTEMP')
        displayMessage 'CPU temperature....:' "$(sensors | grep "Core 0" | tr -d "+" | awk '{print $3;}')"
        ;;
    'SSHLOGINS')
        displayMessage 'SSH logins.........:' "Currently $(who -q | cut -c "9-11" | sed "1 d") user(s) logged in."
        ;;
    'LASTLOGIN')
        displayMessage 'Last login.........:' "$(last -2 -a -F | awk 'NR==2 {print $1,"on",$3,$4,$5,$6,$7,"from " $15}')"
        ;;
    'MESSAGES')
        displayMessage 'Last 3 messages....:' ""
        displayMessage '' "${colour[reset]}$(tail -3 /var/log/messages)"
        ;;
    'TOP_PROCESSES')
	displayMessage 'Top process........:' "$(ps -eo user:20,cmd,%mem,%cpu --sort=-%cpu | head -2 | awk '{print "Process: " $2 " ***  User: "$2" *** CPU Usage: " $3"%"}' | tail -1)${black}"
	;;
    *)
        # default, do nothing
        ;;
    esac
}

for K in "${!settings[@]}";
do
    metrics "${settings[$K]}"
done

echo "${colour[reset]}"
